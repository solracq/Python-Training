pass - Do nothing (no-op)

  if (a==1):
     print "Happy"
  elif (a==2")
     print "Very Happy"
  elif (a==3)
     pass
  elif (a==4)
     print "Very Sad"
  elif (a==5)
     print "Sad"


Lists
  mylist = list("a", "b", "c")
  mylist = ["a", "b", "c"]
  mylist[2] = "d"
  mylist.append("e")
  for item in mylist:
    print(item)
  * Indexed
  * Allow Duplicate Values
  * Modifiable
  * Backed by an Array, reallocates bigger array when needed
      (Inserting at end is fast, inserting at start is slow)
  * No usable as a key in a Dictionary

Tuples
  mylist = tuple("a", "b", "c")
  mylist = ("a", "b", "c")
  mylist[2] = "d" #Doesn't work... read only
  for item in mylist:
    print(item)
  * Indexed
  * Allow Duplicate Values
  * Unmodifiable
  * Backed by an Array, precisely the right size
  * Usable as a key in a Dictionary

Sets
  myset = set("a", "b", "c")
  myset = {"a", "b", "c"}
  myset[2] = "d" #Doesn't work, because it's unordered.
  myset.add("d")

  * Not Indexed (check for membership only)
  * Unordered
  * Do NOT allow Duplicate Values
  * Modifiable (set items can be added but they cannot be changed or updated)
  * No usable as a key in Dictionary
  * Backed by a hash table

Frozen Set
  myset = frozenset("a", "b", "c")
  * Just like a set, but read-only
  * Usable as a key in a Dictionary
  * Backed by a hash table

Dictionaries
  mydict = dict("a"=4, "b"=5, "c"=6)
  mydict = {"a": 4, "b": 5, "c": 6}
  mydict["a"] += 2
  for key in mydict:
    pass
  print("A")
  for key in mydict.keys():
    print (key)
  for value in mydict.values():
    print (value)
  for key,value in mydict.items():
    print (key, value, sep=": ")
  * Indexed by key
  * Backed by a hash table


Packing/Unpacking
  (x,y) = (y,x)
  x,y = y,x # exchange value


Slicing
  mylist=["a", "b", "c"]
  mylist[0] = "first"
  mylist[-1] = "last"
  print(mylist)
     # ["first", "b", "last"]
  mylist[1:-1] # All but first item
  mylist[::2] # Every other item
  mylist[1:2] = [5,6]

List Comprehensions
  mylist = [ i**3 for i in range(1,11) ]
  total=sum(list)

Generator Expressions
  mygenerator = ( i**3 for i in range(1,11) )
  total=sum(mygenerator)

  mygenerator = ( i**3 for i in range(1,11) )
  mygenerator[2] #Doesn't work
  first = mygenerator.__next__()
  second = mygenerator.__next__()
  third= mygenerator.__next__()


File IO
  - with to autoclose resources
  with open("filename.txt", "r") as myFile:
      lineList = myFile.readLines();

String Split/Join
  mystring="Apple:Orange:Banana"
  mylist=mystring.split(":")

  mylist=["Apple", "Orange", Banana"]
  mystring=":".join(mylist)












